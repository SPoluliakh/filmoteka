{"version":3,"file":"static/js/746.36c7bbc5.chunk.js","mappings":"2RAEaA,EAAWC,EAAAA,GAAAA,GAAH,6GAGH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGLC,EAAeJ,EAAAA,GAAAA,GAAH,2JACO,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAChB,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACF,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAMJE,EAAeL,EAAAA,GAAAA,IAAH,iLACd,SAAAC,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,MAAnB,IACK,SAAAN,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAQLK,EAAgBR,EAAAA,GAAAA,GAAH,uEACV,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPM,EAAeT,EAAAA,GAAAA,EAAH,0CACb,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGAO,EAAUV,EAAAA,GAAAA,IAAH,+HAGQ,SAAAC,GAAC,OAAIA,EAAEC,MAAMS,MAAMC,MAAlB,IACA,SAAAX,GAAC,OAAIA,EAAEC,MAAMS,MAAMC,MAAlB,IAGjBC,EAAYb,EAAAA,GAAAA,IAAH,sF,4BCxCTc,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,SAAC,EAAD,UACGA,EAASC,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,UAAlC,OACZ,SAAC,EAAD,WACE,UAAC,EAAD,YACE,SAAC,EAAD,CACEC,QAAQ,OACRC,IACEH,EAAY,8CAC+BA,GACvCI,EAENC,IAAKN,KAEP,UAAC,EAAD,YACE,UAAC,EAAD,eAAoBA,EAApB,QACA,UAAC,EAAD,eAAmBE,EAAnB,cAbgBH,EADV,KAqBnB,EAEDH,EAASW,UAAY,CACnBV,SAAUW,IAAAA,OCxBL,IAAMC,EAAO,WAClB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAzC,eAAOb,EAAP,KAAiBgB,EAAjB,KACQC,GAAWC,EAAAA,EAAAA,MAAXD,OAeR,IAbAE,EAAAA,EAAAA,YAAU,WACRJ,EAAU,YACVK,EAAAA,EAAAA,GAAUH,GACPI,MAAK,SAAAC,GACJN,EAAYM,GACZP,EAAU,UACX,IACAQ,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZT,EAAU,WACX,GACJ,GAAE,CAACE,IAECjB,EAAL,CAEA,IAAQ2B,EAAS3B,EAASsB,KAAlBK,KACR,OACE,gCACc,YAAXb,IAAwB,SAACc,EAAA,EAAD,IACb,YAAXd,IAAwB,SAACf,EAAD,CAAUC,SAAU2B,IACjC,aAAXb,GACkB,IAAhBa,EAAKE,SACJ,SAAC,IAAD,8CATa,CAatB,C","sources":["components/Cast/CastInfo.styled.js","components/Cast/CastInfo.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -${p => p.theme.space[2]}px;\n  margin-top: -${p => p.theme.space[2]}px;\n`;\n\nexport const CastListItem = styled.li`\n  flex-basis: calc(100% / 5 - ${p => p.theme.space[2]}px);\n  margin-left: ${p => p.theme.space[2]}px;\n  margin-top: ${p => p.theme.space[2]}px;\n\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const CastInfoWrap = styled.div`\n  color: ${p => p.theme.colors.navBcg};\n  padding-top: ${p => p.theme.space[2]}px;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  flex-grow: 1;\n`;\n\nexport const CastInfoTitle = styled.h3`\n  margin-top: ${p => p.theme.space[0]}px;\n  margin-bottom: ${p => p.theme.space[1]}px;\n`;\n\nexport const CastInfoText = styled.p`\n  margin: ${p => p.theme.space[0]}px;\n`;\n\nexport const ItemImg = styled.img`\n  width: 100%;\n  object-fit: cover;\n  border-top-left-radius: ${p => p.theme.radii.normal};\n  border-top-right-radius: ${p => p.theme.radii.normal};\n`;\n\nexport const InnerWrap = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n","import NoImg from '../../components/NoImg/no-photo.png';\nimport * as SC from './CastInfo.styled';\nimport PropTypes from 'prop-types';\n\nexport const CastInfo = ({ castInfo }) => {\n  return (\n    <SC.CastList>\n      {castInfo.map(({ credit_id, name, profile_path, character }) => (\n        <SC.CastListItem key={credit_id}>\n          <SC.InnerWrap>\n            <SC.ItemImg\n              loading=\"lazy\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original/${profile_path}`\n                  : NoImg\n              }\n              alt={name}\n            />\n            <SC.CastInfoWrap>\n              <SC.CastInfoTitle> {name} </SC.CastInfoTitle>\n              <SC.CastInfoText> {character} </SC.CastInfoText>\n            </SC.CastInfoWrap>\n          </SC.InnerWrap>\n        </SC.CastListItem>\n      ))}\n    </SC.CastList>\n  );\n};\n\nCastInfo.prototype = {\n  castInfo: PropTypes.array,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../../Utils/Fetch';\nimport { NoInfoText } from 'components/NoInfo/NoInfo.styled';\nimport Spiner from 'components/Spiner/Spiner';\nimport { CastInfo } from './CastInfo';\n\nexport const Cast = () => {\n  const [loader, setLoader] = useState(null);\n  const [castInfo, setCastInfo] = useState(null);\n  const { filmId } = useParams();\n\n  useEffect(() => {\n    setLoader('pending');\n    fetchCast(filmId)\n      .then(data => {\n        setCastInfo(data);\n        setLoader('resolve');\n      })\n      .catch(err => {\n        console.log(err);\n        setLoader('rejected');\n      });\n  }, [filmId]);\n\n  if (!castInfo) return;\n\n  const { cast } = castInfo.data;\n  return (\n    <>\n      {loader === 'pending' && <Spiner />}\n      {loader === 'resolve' && <CastInfo castInfo={cast} />}\n      {loader === 'rejected' ||\n        (cast.length === 0 && (\n          <NoInfoText>Sorry, there is no cast info.</NoInfoText>\n        ))}\n    </>\n  );\n};\n"],"names":["CastList","styled","p","theme","space","CastListItem","CastInfoWrap","colors","navBcg","CastInfoTitle","CastInfoText","ItemImg","radii","normal","InnerWrap","CastInfo","castInfo","map","credit_id","name","profile_path","character","loading","src","NoImg","alt","prototype","PropTypes","Cast","useState","loader","setLoader","setCastInfo","filmId","useParams","useEffect","fetchCast","then","data","catch","err","console","log","cast","Spiner","length"],"sourceRoot":""}